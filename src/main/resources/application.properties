spring.application.name=Stock-market-simulation

# Set root logging level to DEBUG
logging.level.root=ERROR

# Optionally, to reduce logs from Spring framework or other libraries, set their levels to WARN or ERROR
logging.level.org.springframework=WARN
logging.level.org.hibernate=WARN


spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://aws-0-ap-south-1.pooler.supabase.com:5432/postgres?user=postgres.hmpsjbytgzuyoaangmtj&password=Supabase$$$10313
spring.datasource.username=postgres.hmpsjbytgzuyoaangmtj
spring.datasource.password=Supabase$$$10313
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=none
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl


security.jwt.secret=${JWT_SECRET:o9olI3Lhv7fp/6TUNvx1V54qGhK9KEHhxXYYjNMBjU0=}
security.jwt.accessTokenExpirationMinutes=10
security.jwt.refreshTokenExpirationDays=7


# --- Connection to Kafka Server ---
# Your app needs this to find the Kafka broker.
spring.kafka.bootstrap-servers=localhost:9092

# --- Custom Application Property ---
# A clean way to manage your topic name.
spring.kafka.topic.name=order-requests

# --- Producer Configuration (Used by your Controller) ---
# How the Controller converts the order's stock symbol (String) into bytes.
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# How the Controller converts the OrderDTO object into JSON bytes to send.
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# --- Consumer Configuration (Used by your new Kafka Listener) ---
# Identifies your listener. All instances of your app will share the work.
spring.kafka.consumer.group-id=order-processing-group
# Tells the listener to process all messages from the beginning if it's new.
spring.kafka.consumer.auto-offset-reset=earliest
# How the listener converts the message key from bytes back to a String.
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# How the listener converts the JSON bytes back into an OrderDTO object.
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# The critical security setting allowing the creation of your OrderDTO.
spring.kafka.consumer.properties.spring.json.trusted.packages=com.wallstreet.stock.market.simulation.dto


influx.url=https://us-east-1-1.aws.cloud2.influxdata.com
influx.org=ac9267252bdc69c3
influx.bucket=stock_prices
influx.token=pSsEzZhLZHQ0vpkoj934ILg5x444NTaC4MQaCJ3O_7u7Cvf9SAr_ftnHTxp43Ap_-OtGDbNoHXuQUGKjV2WDEQ==
