package com.wallstreet.stock.market.simulation.service.orderprocessingservice;

import com.wallstreet.stock.market.simulation.dto.OrderDTO;
import com.wallstreet.stock.market.simulation.dto.TradeDTO;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * A container for the results generated by an OrderProcessor.
 * It holds executed trades and a list of orders with their final status after processing.
 */
public class ProcessingResult {

    private final List<TradeDTO> executedTrades = new ArrayList<>();
    private final List<OrderDTO> processedOrders = new ArrayList<>();

    public void addTrade(TradeDTO trade) {
        this.executedTrades.add(trade);
    }

    /**
     * Adds an order to the list of processed orders for this cycle.
     * The order should have its status updated (e.g., FILLED, PARTIAL, EXPIRED)
     * before being added.
     *
     * @param order The processed order.
     */
    public void addProcessedOrder(OrderDTO order) {
        this.processedOrders.add(order);
    }

    public List<TradeDTO> getExecutedTrades() {
        return Collections.unmodifiableList(executedTrades);
    }

    public List<OrderDTO> getProcessedOrders() {
        return Collections.unmodifiableList(processedOrders);
    }
}
