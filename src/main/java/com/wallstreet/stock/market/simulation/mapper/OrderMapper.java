package com.wallstreet.stock.market.simulation.mapper;

import java.math.BigDecimal;

import com.wallstreet.stock.market.simulation.dto.OrderDTO;
import com.wallstreet.stock.market.simulation.model.Order;
import com.wallstreet.stock.market.simulation.model.enums.OrderStatus; // Assuming you have this enum

/**
 * A utility class to map between Order DTOs and Order entities.
 */
public final class OrderMapper {

    // Private constructor to prevent instantiation
    private OrderMapper() {}

    /**
     * Converts an OrderDTO to a new Order entity ready for persistence.
     *
     * @param dto The data transfer object.
     * @return A new Order entity.
     */
    public static Order toNewEntity(OrderDTO dto) {
        if (dto == null) {
            return null;
        }

        Order entity = new Order();

        // The ID will be generated by the database, so we do not set it here.
        // The user relationship will be set by the service layer.
        entity.setSymbol(dto.getSymbol());
        entity.setSide(dto.getSide());
        entity.setType(dto.getType());
        entity.setPrice(BigDecimal.valueOf(dto.getPrice()));
        entity.setQty(dto.getQuantity());

        // When an order is first created, its remaining quantity is the total quantity.
        entity.setRemainingQty(dto.getQuantity());

        // A new order always starts with an 'OPEN' status.
        entity.setStatus(OrderStatus.OPEN);
        
        // Set the version for optimistic locking, if you are using it.
        entity.setVersion(1L);

        return entity;
    }
}
